@startuml

class CarController {
-delay : int
-timer : Timer
~frame : CarView
~cars : ArrayList<Car>

+main() : void
~TurnAround(Car) : void
~gas(int) : void
~brake(int) : void
~startEngineAll() : void
~stopEngineAll() : void
~raise() : void
~lower() : vlod
~setTurboOn() : void
~setTurboOff() : void
}

class TimerListener {
+actionPerformed(ActionEvent) : void
}

class CarView {
-{static} X : int
-{static} Y : int
~ carC : CarController
~ drawPanel : DrawPanel
~ controlPanel : JPanel
~ gasPanel : JPanel
~ gasLabel : JLabel
~ gasButton : JButton
~ brakeButton : JButton
~ turboOnButton : JButton
~ turboOffButton : JButton
~ liftBedButton : JButton
~ lowerBedButton : JButton
~ startButton : JButton
~ stopButton : JButton
~ gasAmount : int
+ CarView(String, CarController)
- initComponents() : void

}

class DrawPanel{
+DrawPanel(int, int)
~moveit() : void
~connectCars(List<Car>) : void
#paintComponent(Graphics) : void
}

class DrawedCar {
+ carRef : Car
+ image : BufferedImage
+ point : Point
+ DrawedCar()
}

class Point{
}
class JSpinner{}
class JPanel{}
class JButton {}
class JLabel {}

class Volvo240 {
-{static} trimFactor : double
#findSpeedFactor() : double
}

class Saab95 {
-turboOn : boolean
+setTurboOn() : void
+setTurboOff() : void
+getTurboOn() : boolean
-findTurboFactor() : double
#findSpeedFactor() : double
}

class Scania {
+raise(double) : void
+lower(double) : void
+startEngine() : void
+isFullyRaised() : boolean
+isFullyLowered() : boolean
#findSpeedFactor() : double
}

interface ActionListener

abstract class Car {
-modelName : String
-color : Color
-nrDoors : int
+getNrDoors() : int
+getColor() : Color
+setColor(Color) : void
+getModelName() : String
+getNoOfDoors() : int
}

abstract class Vehicle {
-currentSpeed : double
-enginePower : double
-width : double
-length : double
-direction : Vector2D
-position : Vector2D
-boolean : engineOn
+getEnginePower() : double
+getCurrentSpeed() : double
+startEngine() : void
+stopEngine() : void
+gas(double) : void
+brake(double) : void
+isMoving() : boolean
+move() : void
+turnLeft() : void
+turnRight() : void
+getWidth() : double
+getLength() : double
+getDirection() : Vector2D
+getPosition() : Vector2D
+setPosition(Vector2D) : void
+setDirection(Vector2D) : void
-incrementSpeed(double, double) : void
-decrementSpeed(double, double) : void
#{abstract} findSpeedFactor() : double

}



class Vector2D {
-x : double
-y : double
+plus(Vector2D) : Vector2D
+multiplyByScalar(double) : Vector2D
+rotateCC(double) : Vector2D
+distanceTo(Vector2D) : double
+{static}clamp(double, double, double) : double
}




CarView o--> CarController
CarView o--> DrawPanel
CarView o--> JPanel
CarView o--> JLabel
CarView o--> JButton
CarView o--> JSpinner
ActionListener <.. CarView

CarController o--> Car
CarController o-> CarView
CarController o--> TimerListener

ActionListener <|.. TimerListener
Car <|-- Volvo240
Car <|-- Saab95
Car <|-- Scania



DrawPanel +--> DrawedCar

DrawedCar o--> Point
DrawedCar o--> Car

Vehicle o--> Vector2D

Vehicle <|-- Car




@enduml


abstract class Container {}
class LIFO {}
class FIFO {}
class Ferry{}
Car <|-- TransportTruck
class TransportTruck {}
TransportTruck o--> LIFO
Ferry o--> FIFO
Vehicle <|-- Ferry
Container <|-- FIFO
Container <|-- LIFO