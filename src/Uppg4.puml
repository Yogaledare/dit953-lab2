@startuml


class Application{
{static}+main()
}

Application *--> CarController

interface ICarView{
+setGasButtonActionListener(ActionListener) : void
+setBreakButtonActionListener(ActionListener) : void
+setStartButtonActionListener(ActionListener) : void
+setStopButtonActionListener(ActionListener) : void
+setTurboOnButtonActionListener(ActionListener) : void
+setTurboOffButtonActionListener(ActionListener) : void
+setLiftRedButtonActionListener(ActionListener) : void
+setLowerRedButtonActionListener(ActionListener) : void
}

ICarView <|.. CarView
ICarView <--* CarController


class Model{
-timer : Timer
-boardWidth : double
-boardLength : double
-cars : List<Car>
-Signal : Signal
-updateModel() : void
-compose
-isOutOfBounds(Car) : boolean
-bounceOffWall(Car) : void
+getSignal() : Signal
}

Model *--> Car


interface IModel{
+startEngine(Car) : void
+stopEngine(Car) : void
+gas(Car) : void
+brake(Car) : void
+raise(Car) : void
+lower(Car) : void
+setTurboOn(Car) : void
+setTurboOff(Car) : void
+subscribe(Observer) : void
+unsubscribe(Observer) : void
}

IModel  <|.. Model
IModel <--* CarController



class CarController {
-iCarView : ICarView
-iModel : IModel
+CarController(ICarView, IModel) : void
-bindListeners() : void
-gasAll(int) : void
-brakeAll(int) : void
-startEngineAll() : void
-stopEngineAll() : void
-setTurboOnAll() : void
-setTurboOffAll() : void
-raiseAll() : void
-lowerAll() : void
}

class TimerListener {
+actionPerformed(ActionEvent) : void
}

class CarView {
- drawPanel : DrawPanel
- controlPanel : JPanel
- gasPanel : JPanel
- gasLabel : JLabel
- gasButton : JButton
- brakeButton : JButton
- turboOnButton : JButton
- turboOffButton : JButton
- liftBedButton : JButton
- lowerBedButton : JButton
- startButton : JButton
- stopButton : JButton
- gasAmount : int
+ CarView(String, Signal)
- paintCars(List<IPaintable>) : void
- initComponents() : void
}

class DrawPanel{
- images : Map<String, BufferedImage>
#paintComponent(Graphics) : void
+ bind(Object, String) : void
+ get(Object) : BufferedImage
+ paintCars(List<IPaintable>) : void
- bindCars() : void
}


class JSpinner{}
class JPanel{}
class JButton {}
class JLabel {}
class Timer {}

class Volvo240 {
-{static} trimFactor : double
#findSpeedFactor() : double
}

class Saab95 {
-turboOn : boolean
+setTurboOn() : void
+setTurboOff() : void
+getTurboOn() : boolean
-findTurboFactor() : double
#findSpeedFactor() : double
}

class Scania {
+raise(double) : void
+lower(double) : void
+startEngine() : void
+isFullyRaised() : boolean
+isFullyLowered() : boolean
#findSpeedFactor() : double
}

interface ActionListener

interface IPaintable {
+getPosition() : Vector2D
+getModelName() : String
}

abstract class Car {
-modelName : String
-color : Color
-nrDoors : int
+getNrDoors() : int
+getColor() : Color
+setColor(Color) : void
+getModelName() : String
+getNoOfDoors() : int
}

abstract class Vehicle {
-direction : Vector2D
-position : Vector2D
+startEngine() : void
+stopEngine() : void
+gas(double) : void
+brake(double) : void
+isMoving() : boolean
+move() : void
+getDirection() : Vector2D
+getPosition() : Vector2D
+setPosition(Vector2D) : void
+setDirection(Vector2D) : void
#{abstract} findSpeedFactor() : double

}



class Vector2D {
-x : double
-y : double
+getX() : double
+getY() : double
+plus(Vector2D) : Vector2D
+multiplyByScalar(double) : Vector2D
+rotateCC(double) : Vector2D
+distanceTo(Vector2D) : double
+{static}clamp(double, double, double) : double
}



CarView *--> DrawPanel
CarView *--> JPanel
CarView *--> JLabel
CarView *--> JButton
CarView *--> JSpinner



Model ..> Timer
Model *--> TimerListener

ActionListener <|.. TimerListener


Car <|-- Volvo240
Car <|-- Saab95
Car <|-- Scania

IPaintable <|.. Car
IPaintable <.. CarView

DrawPanel ..> BufferedImage

IPaintable ..> Vector2D

DrawPanel ..> Graphics

Vehicle *--> Vector2D

Vehicle <|-- Car

interface Observer{
+ actOnPublish(List<? extends IPaintable>) : void
}

Observer *-> IPaintable

class Signal{
- observers : List<Observer>
+ addSubscriber(Observer) : void
+ removeSubscriber(Observer) : void
+ publish(List<? extends IPaintable>) : void
}

Observer <|.. CarView
Model *--> Signal


Signal *--> Observer
Signal ..> IPaintable



class BufferedImage{}
class Graphics{}

@enduml
Application *--> ICarView
Application *--> IModel

Model ..> ViewModel
class ViewModel {
-carRepresentations : List<CarRepresentation>

}

class CarRepresentation {
-position : Vector2D
-class : Class
}

CarRepresentation <--* ViewModel
Vector2D <--* CarRepresentation

CarController ..> ViewModel

ActionListener <.. CarView

-{static} X : int
-{static} Y : int

class Point{
}


CarView o--> CarController
CarController o-> CarView
class DrawedCar {
+ carRef : Car
+ image : BufferedImage
+ point : Point
+ DrawedCar()
}


DrawPanel +--> DrawedCar

DrawedCar *--> Point
DrawedCar o--> Car

CarController *--> Car
